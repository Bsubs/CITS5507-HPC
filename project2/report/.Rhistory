knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyverse)
library(tinytex)
library(gridExtra)
df <- read_excel("data.xlsx")
# Convert the dataframe to a format suitable for plotting
# Melt the data so we have 'variable' and 'value' columns
library(reshape2)  # For melt function
plot_data <- melt(df, measure.vars = c("MPIFileWriteScatter", "MPIFileWriteSend"))
# Plot the data
ggplot(plot_data, aes(x = variable, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(y = "Value", x = "Variables", title = "Bar Chart of MPIFileWriteScatter and MPIFileWriteSend") +
theme_minimal() +
theme(legend.title = element_blank())  # Removes legend title
df$Sequential <- c(327.67825, 327.67825, 327.67825, 327.67825)
ggplot(df, aes(x = NumNodes, y = MPISeq)) +
geom_point() +
geom_smooth(aes(y = MPISeq, linetype = "MPI Sequential"), method = "lm", formula = y ~ exp(-x), se = FALSE) +
geom_line(aes(y=Sequential, linetype="Sequential", color="red"), size=2) +
labs(y = "Time(s)", x = "NumNodes", title = "Execution Time") +
theme_minimal() +
scale_x_continuous(breaks = c(2, 3, 4)) +
theme(legend.position = "bottom")  # Move Legend to Bottom
df1 <- df[-1,]
df_long <- df1 %>%
tidyr::pivot_longer(cols = c("MPISeq", "MPISendRec"),
names_to = "Variable",
values_to = "Value")
# Plot the data
ggplot(df_long, aes(x = NumNodes, y = Value, color = Variable)) +
geom_line() +
labs(y = "Time(s)", x = "NumNodes", title = "MPI Scatter & Gather and MPI Send & Rec") +
theme_minimal() +
scale_color_manual(values = c("MPISeq" = "blue", "MPISendRec" = "red"),
name = "Method",  # Change Legend Title
labels = c("MPI Send & Receive", "MPI Scatter & Gather")) +  # Change Legend Labels
scale_x_continuous(breaks = c(2, 3, 4)) +
theme(legend.position = "bottom")  # Move Legend to Bottom
ggplot(df,  aes(x = NumNodes)) +
geom_line(aes(y=MPISeq)) +
geom_line(aes(y=MPIParBaseNodes)) +
geom_line(aes(y=MPIThreadSafe)) +
geom_point(aes(y = MPISeq, color = "MPI Only")) +
geom_point(aes(y = MPIParBaseNodes, color = "MPI Parallel")) +
geom_point(aes(y = MPIThreadSafe, color = "MPI Parallel Threads")) +
labs(title = "Execution Time vs Number of MPI Nodes & OpenMP Threads",
x = "Number of MPI Nodes",
y = "Time (s)",
color = "Number of Threads")
df2 <- df[-c(1,2,3),]
df2 <- subset(df2, select=c(MPIParBaseNodes, MPIThreadSafe, MPISeq))
df2 <- df2 %>%
rename(
`MPI Parallel` = MPIParBaseNodes,
`MPI Parallel Threads` = MPIThreadSafe,
`MPI Only` = MPISeq
)
# Convert data to long format
df2_long <- gather(df2, key = "Category", value = "Value")
# Create the bar chart
ggplot(df2_long, aes(x = Category, y = Value, color=Category, fill=Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f", round(Value, 2))),
vjust = -0.5,  # Adjust this for vertical positioning of the labels
size = 4) +
labs(title = "Time for 4 Nodes", y = "Time(s)", x="Implementation") +
theme_minimal()
p1 <- ggplot(data=df, aes(x=NumThreads, y=MPIParBase))+
geom_line()+
geom_point() +
labs(title = "Time for MPI Parallel", y = "Time(s)", x="Number of Threads")
p2 <- ggplot(data=df, aes(x=NumThreads, y=ParBase))+
geom_line()+
geom_point()+
labs(title = "Time for Parallel Base", y = "Time(s)", x="Number of Threads")
grid.arrange(p1,p2,ncol=2)
df3 <- subset(df, select=c(NumFish, SeqBaseT, ParBaseT, MPISeqBaseT, MPIParBaseT))
df_long <- df3 %>%
pivot_longer(-NumFish, names_to = "Variable", values_to = "Value")
p <- ggplot(df_long, aes(x = NumFish, y = Value, color = Variable, group = Variable)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_log10(labels = scales::comma_format()) +  # log scale for x-axis and formatted labels
labs(
title = "Comparison of Metrics",
x = "Number of Fish",
y = "Time(s)",
color = "Implementation"
) +
theme_minimal()
print(p)
df4 <- df[-c(1,2,3),]
df4 <- subset(df2, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- df[-c(1,2,3),]
df4 <- subset(df4, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- df4 %>%
rename(
`Scatter & Gather` = MPIFileWriteScatter,
`Send & Receive` = MPIFileWriteSend
)
# Convert data to long format
df2_long <- gather(df4, key = "Category", value = "Value")
# Create the bar chart
ggplot(df2_long, aes(x = Category, y = Value, color=Category, fill=Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f", round(Value, 2))),
vjust = -0.5,  # Adjust this for vertical positioning of the labels
size = 4) +
labs(title = "Time for 4 Nodes", y = "Time(s)", x="Implementation") +
theme_minimal()
df4 <- subset(df4, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- subset(df, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- df4 %>%
rename(
`Scatter & Gather` = MPIFileWriteScatter,
`Send & Receive` = MPIFileWriteSend
)
# Convert data to long format
df2_long <- gather(df4, key = "Category", value = "Value")
# Create the bar chart
ggplot(df2_long, aes(x = Category, y = Value, color=Category, fill=Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f", round(Value, 2))),
vjust = -0.5,  # Adjust this for vertical positioning of the labels
size = 4) +
labs(title = "Time for 4 Nodes", y = "Time(s)", x="Implementation") +
theme_minimal()
df4 <- subset(df, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- df4 %>%
rename(
`Scatter & Gather` = MPIFileWriteScatter,
`Send & Receive` = MPIFileWriteSend
)
# Convert data to long format
df2_long <- gather(df4, key = "Category", value = "Value")
# Create the bar chart
ggplot(df2_long, aes(x = Category, y = Value, color=Category, fill=Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f", round(Value, 2))),
vjust = -0.5,  # Adjust this for vertical positioning of the labels
size = 4) +
labs(title = "Time for 4 Nodes", y = "Time(s)", x="Implementation") +
theme_minimal()
df4 <- subset(df, select=c(MPIFileWriteScatter, MPIFileWriteSend))
df4 <- df4 %>%
rename(
`Scatter & Gather` = MPIFileWriteScatter,
`Send & Receive` = MPIFileWriteSend
)
# Convert data to long format
df2_long <- gather(df4, key = "Category", value = "Value")
# Create the bar chart
ggplot(df2_long, aes(x = Category, y = Value, color=Category, fill=Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f", round(Value, 2))),
vjust = -0.5,  # Adjust this for vertical positioning of the labels
size = 4) +
labs(title = "Time for 4 Nodes", y = "Time(s)", x="Implementation") +
theme_minimal()+
theme(legend.position = "none")
unlink("cits5507project2_cache", recursive = TRUE)
unlink("cits5507project2_cache", recursive = TRUE)
